diff --git a/alphafold/alphafold/relax/amber_minimize_test.py b/alphafold/alphafold/relax/amber_minimize_test.py
index b67cb91..222f030 100644
--- a/alphafold/alphafold/relax/amber_minimize_test.py
+++ b/alphafold/alphafold/relax/amber_minimize_test.py
@@ -22,6 +22,9 @@ import numpy as np
 # Internal import (7716).
 
 
+_USE_GPU = False
+
+
 def _load_test_protein(data_path):
   pdb_path = os.path.join(absltest.get_default_test_srcdir(), data_path)
   with open(pdb_path, 'r') as f:
@@ -35,7 +38,7 @@ class AmberMinimizeTest(absltest.TestCase):
         'alphafold/relax/testdata/multiple_disulfides_target.pdb'
         )
     ret = amber_minimize.run_pipeline(prot, max_iterations=10, max_attempts=1,
-                                      stiffness=10.)
+                                      stiffness=10., use_gpu=_USE_GPU)
     self.assertIn('opt_time', ret)
     self.assertIn('min_attempts', ret)
 
@@ -50,7 +53,7 @@ class AmberMinimizeTest(absltest.TestCase):
         ' residues. This protein contains at least one residue with no atoms.'):
       amber_minimize.run_pipeline(prot, max_iterations=10,
                                   stiffness=1.,
-                                  max_attempts=1)
+                                  max_attempts=1, use_gpu=_USE_GPU)
 
   def test_iterative_relax(self):
     prot = _load_test_protein(
@@ -59,7 +62,7 @@ class AmberMinimizeTest(absltest.TestCase):
     violations = amber_minimize.get_violation_metrics(prot)
     self.assertGreater(violations['num_residue_violations'], 0)
     out = amber_minimize.run_pipeline(
-        prot=prot, max_outer_iterations=10, stiffness=10.)
+        prot=prot, max_outer_iterations=10, stiffness=10., use_gpu=_USE_GPU)
     self.assertLess(out['efinal'], out['einit'])
     self.assertEqual(0, out['num_residue_violations'])
 
