diff --git a/alphafold/alphafold/relax/amber_minimize.py b/alphafold/alphafold/relax/amber_minimize.py
index 57c4389..4694f44 100644
--- a/alphafold/alphafold/relax/amber_minimize.py
+++ b/alphafold/alphafold/relax/amber_minimize.py
@@ -500,51 +500,3 @@ def run_pipeline(
                  ret["num_residue_violations"], ret["num_exclusions"])
     iteration += 1
   return ret
-
-
-def get_initial_energies(pdb_strs: Sequence[str],
-                         stiffness: float = 0.0,
-                         restraint_set: str = "non_hydrogen",
-                         exclude_residues: Optional[Sequence[int]] = None):
-  """Returns initial potential energies for a sequence of PDBs.
-
-  Assumes the input PDBs are ready for minimization, and all have the same
-  topology.
-  Allows time to be saved by not pdbfixing / rebuilding the system.
-
-  Args:
-    pdb_strs: List of PDB strings.
-    stiffness: kcal/mol A**2, spring constant of heavy atom restraining
-        potential.
-    restraint_set: Which atom types to restrain.
-    exclude_residues: An optional list of zero-indexed residues to exclude from
-        restraints.
-
-  Returns:
-    A list of initial energies in the same order as pdb_strs.
-  """
-  exclude_residues = exclude_residues or []
-
-  openmm_pdbs = [openmm_app.PDBFile(PdbStructure(io.StringIO(p)))
-                 for p in pdb_strs]
-  force_field = openmm_app.ForceField("amber99sb.xml")
-  system = force_field.createSystem(openmm_pdbs[0].topology,
-                                    constraints=openmm_app.HBonds)
-  stiffness = stiffness * ENERGY / (LENGTH**2)
-  if stiffness > 0 * ENERGY / (LENGTH**2):
-    _add_restraints(system, openmm_pdbs[0], stiffness, restraint_set,
-                    exclude_residues)
-  simulation = openmm_app.Simulation(openmm_pdbs[0].topology,
-                                     system,
-                                     openmm.LangevinIntegrator(0, 0.01, 0.0),
-                                     openmm.Platform.getPlatformByName("CUDA"))
-  energies = []
-  for pdb in openmm_pdbs:
-    try:
-      simulation.context.setPositions(pdb.positions)
-      state = simulation.context.getState(getEnergy=True)
-      energies.append(state.getPotentialEnergy().value_in_unit(ENERGY))
-    except Exception as e:  # pylint: disable=broad-except
-      logging.error("Error getting initial energy, returning large value %s", e)
-      energies.append(unit.Quantity(1e20, ENERGY))
-  return energies
